// Code generated by Remoto; DO NOT EDIT.

// Package bank contains the HTTP server for bank services.
package skeleton

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"os"
	"strconv"

	"github.com/machinebox/remoto/go/remotohttp"
	"github.com/machinebox/remoto/go/remotohttp/remototypes"
	"github.com/pkg/errors"
)



type Bank interface {
	Balance(context.Context, *BalaceRequest) (*Response, error)

	Pay(context.Context, *PaymentRequest) (*Response, error)

	WithDraw(context.Context, *WithdrawlRequest) (*Response, error)
}

// Run is the simplest way to run the services.
func Run(addr string, bank Bank, ) error {
	server := New(
		bank,
	)
	if err := server.Describe(os.Stdout); err != nil {
		return errors.Wrap(err, "describe service")
	}
	if err := http.ListenAndServe(addr, server); err != nil {
		return err
	}
	return nil
}

// New makes a new remotohttp.Server with the specified services
// registered.
func New(
	bank Bank,
) *remotohttp.Server {
	server := &remotohttp.Server{
		OnErr: func(w http.ResponseWriter, r *http.Request, err error) {
			fmt.Fprintf(os.Stderr, "%s %s: %s\n", r.Method, r.URL.Path, err.Error())
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
		NotFound: http.NotFoundHandler(),
	}

	RegisterBankServer(server, bank)
	return server
}

// RegisterBankServer registers a Bank with a remotohttp.Server.
func RegisterBankServer(server *remotohttp.Server, service Bank) {
	srv := &httpBankServer{
		service: service,
		server:  server,
	}
	server.Register("/remoto/Bank.Balance", http.HandlerFunc(srv.handleBalance))
	server.Register("/remoto/Bank.Pay", http.HandlerFunc(srv.handlePay))
	server.Register("/remoto/Bank.WithDraw", http.HandlerFunc(srv.handleWithDraw))

}

type BalaceRequest struct {
	AccountID string `json:"accountID"`

	Amount float64 `json:"amount"`
}

type PaymentRequest struct {
	AccountID string `json:"accountID"`

	Amount float64 `json:"amount"`
}

type Response struct {
	OK bool `json:"oK"`

	Message string `json:"message"`

	Amount float64 `json:"amount"`

	// Error is an error message if one occurred.
	Error string `json:"error"`
}

type WithdrawlRequest struct {
	AccountID string `json:"accountID"`

	Amount float64 `json:"amount"`
}

// httpBankServer is an internal type that provides an
// HTTP wrapper around Bank.
type httpBankServer struct {
	// service is the Bank being exposed by this
	// server.
	service Bank
	// server is the remotohttp.Server that this server is
	// registered with.
	server *remotohttp.Server
}

// handleBalance is an http.Handler wrapper for Bank.Balance.
func (srv *httpBankServer) handleBalance(w http.ResponseWriter, r *http.Request) {
	var reqs []*BalaceRequest
	if err := remotohttp.Decode(r, &reqs); err != nil {
		srv.server.OnErr(w, r, err)
		return
	}

	resps := make([]Response, len(reqs))
	for i := range reqs {
		resp, err := srv.service.Balance(r.Context(), reqs[i])
		if err != nil {
			resps[i].Error = err.Error()
			continue
		}
		resps[i] = *resp
	}
	if err := remotohttp.Encode(w, r, http.StatusOK, resps); err != nil {
		srv.server.OnErr(w, r, err)
		return
	}

}

// handlePay is an http.Handler wrapper for Bank.Pay.
func (srv *httpBankServer) handlePay(w http.ResponseWriter, r *http.Request) {
	var reqs []*PaymentRequest
	if err := remotohttp.Decode(r, &reqs); err != nil {
		srv.server.OnErr(w, r, err)
		return
	}

	resps := make([]Response, len(reqs))
	for i := range reqs {
		resp, err := srv.service.Pay(r.Context(), reqs[i])
		if err != nil {
			resps[i].Error = err.Error()
			continue
		}
		resps[i] = *resp
	}
	if err := remotohttp.Encode(w, r, http.StatusOK, resps); err != nil {
		srv.server.OnErr(w, r, err)
		return
	}

}

// handleWithDraw is an http.Handler wrapper for Bank.WithDraw.
func (srv *httpBankServer) handleWithDraw(w http.ResponseWriter, r *http.Request) {
	var reqs []*WithdrawlRequest
	if err := remotohttp.Decode(r, &reqs); err != nil {
		srv.server.OnErr(w, r, err)
		return
	}

	resps := make([]Response, len(reqs))
	for i := range reqs {
		resp, err := srv.service.WithDraw(r.Context(), reqs[i])
		if err != nil {
			resps[i].Error = err.Error()
			continue
		}
		resps[i] = *resp
	}
	if err := remotohttp.Encode(w, r, http.StatusOK, resps); err != nil {
		srv.server.OnErr(w, r, err)
		return
	}

}

// this is here so we don't get a compiler complaints.
func init() {
	var _ = remototypes.File{}
	var _ = strconv.Itoa(0)
	var _ = io.EOF
}
